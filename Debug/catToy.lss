
catToy.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  0000037a  0000040e  2**0
                  ALLOC, LOAD, DATA
  1 .text         0000037a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000010  00800100  00800100  0000040e  2**0
                  ALLOC
  3 .stab         00000de0  00000000  00000000  00000410  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000fca  00000000  00000000  000011f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000030  00000000  00000000  000021ba  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000021ec  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000005f4  00000000  00000000  0000222c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000005a2  00000000  00000000  00002820  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000001a  00000000  00000000  00002dc2  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000208  00000000  00000000  00002ddc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__vector_14>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a0 31       	cpi	r26, 0x10	; 16
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 48 00 	call	0x90	; 0x90 <main>
  88:	0c 94 bb 01 	jmp	0x376	; 0x376 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <main>:

enum Direction {CW = 1, CCW = 0};


int main()
{
  90:	0f 93       	push	r16
  92:	1f 93       	push	r17
  94:	cf 93       	push	r28
  96:	df 93       	push	r29
  98:	cd b7       	in	r28, 0x3d	; 61
  9a:	de b7       	in	r29, 0x3e	; 62
	stepperApointer = &stepperA;
  9c:	82 e0       	ldi	r24, 0x02	; 2
  9e:	91 e0       	ldi	r25, 0x01	; 1
  a0:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <stepperApointer+0x1>
  a4:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <stepperApointer>
	stepperA.direction = CCW;
  a8:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <stepperA>
	stepperA.lengthSync = 0;
  ac:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <stepperA+0x5>
	stepperA.position = 0;
  b0:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <stepperA+0x2>
  b4:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <stepperA+0x1>
	stepperA.stepsToRun = 0;
  b8:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <stepperA+0x4>
  bc:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <stepperA+0x3>
	stepperA.activeCoil = 0;
  c0:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <stepperA+0x6>

	DDRB = 0xFF;
  c4:	84 e2       	ldi	r24, 0x24	; 36
  c6:	90 e0       	ldi	r25, 0x00	; 0
  c8:	2f ef       	ldi	r18, 0xFF	; 255
  ca:	fc 01       	movw	r30, r24
  cc:	20 83       	st	Z, r18

	TCCR0A |= 1<<WGM01; //Clear timer when comparison kicks in
  ce:	84 e4       	ldi	r24, 0x44	; 68
  d0:	90 e0       	ldi	r25, 0x00	; 0
  d2:	24 e4       	ldi	r18, 0x44	; 68
  d4:	30 e0       	ldi	r19, 0x00	; 0
  d6:	f9 01       	movw	r30, r18
  d8:	20 81       	ld	r18, Z
  da:	22 60       	ori	r18, 0x02	; 2
  dc:	fc 01       	movw	r30, r24
  de:	20 83       	st	Z, r18
	TCCR0B = (1<<CS00) | (1<<CS02);; //Set prescalar to 1024
  e0:	85 e4       	ldi	r24, 0x45	; 69
  e2:	90 e0       	ldi	r25, 0x00	; 0
  e4:	25 e0       	ldi	r18, 0x05	; 5
  e6:	fc 01       	movw	r30, r24
  e8:	20 83       	st	Z, r18
	OCR0A = calculateTimerFromStepInterval(2);
  ea:	07 e4       	ldi	r16, 0x47	; 71
  ec:	10 e0       	ldi	r17, 0x00	; 0
  ee:	82 e0       	ldi	r24, 0x02	; 2
  f0:	0e 94 48 01 	call	0x290	; 0x290 <calculateTimerFromStepInterval>
  f4:	f8 01       	movw	r30, r16
  f6:	80 83       	st	Z, r24
	TIMSK0 |= 1 << OCIE0A;
  f8:	8e e6       	ldi	r24, 0x6E	; 110
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	2e e6       	ldi	r18, 0x6E	; 110
  fe:	30 e0       	ldi	r19, 0x00	; 0
 100:	f9 01       	movw	r30, r18
 102:	20 81       	ld	r18, Z
 104:	22 60       	ori	r18, 0x02	; 2
 106:	fc 01       	movw	r30, r24
 108:	20 83       	st	Z, r18

	sei();
 10a:	78 94       	sei
	{
//		if (stepperA.stepsToRun==0){
//			STOP_STEPPER_A;
//			runStepperLength(&stepperA, 280, 5, CW);
//		}
		if (getCurrentState() == INIT){
 10c:	0e 94 8f 01 	call	0x31e	; 0x31e <getCurrentState>
 110:	88 23       	and	r24, r24
 112:	e1 f7       	brne	.-8      	; 0x10c <main+0x7c>
			runStepperLength(&stepperA, 80, 5, CCW);
 114:	20 e0       	ldi	r18, 0x00	; 0
 116:	45 e0       	ldi	r20, 0x05	; 5
 118:	60 e5       	ldi	r22, 0x50	; 80
 11a:	70 e0       	ldi	r23, 0x00	; 0
 11c:	82 e0       	ldi	r24, 0x02	; 2
 11e:	91 e0       	ldi	r25, 0x01	; 1
 120:	0e 94 96 00 	call	0x12c	; 0x12c <runStepperLength>
			changeState(IDLE);
 124:	82 e0       	ldi	r24, 0x02	; 2
 126:	0e 94 81 01 	call	0x302	; 0x302 <changeState>
		}

	}
 12a:	f0 cf       	rjmp	.-32     	; 0x10c <main+0x7c>

0000012c <runStepperLength>:

}

static void runStepperLength(stepper *stepper, uint16_t lengthInDegress, uint8_t speed, uint8_t direction){
 12c:	cf 93       	push	r28
 12e:	df 93       	push	r29
 130:	cd b7       	in	r28, 0x3d	; 61
 132:	de b7       	in	r29, 0x3e	; 62
 134:	28 97       	sbiw	r28, 0x08	; 8
 136:	0f b6       	in	r0, 0x3f	; 63
 138:	f8 94       	cli
 13a:	de bf       	out	0x3e, r29	; 62
 13c:	0f be       	out	0x3f, r0	; 63
 13e:	cd bf       	out	0x3d, r28	; 61
 140:	9c 83       	std	Y+4, r25	; 0x04
 142:	8b 83       	std	Y+3, r24	; 0x03
 144:	7e 83       	std	Y+6, r23	; 0x06
 146:	6d 83       	std	Y+5, r22	; 0x05
 148:	4f 83       	std	Y+7, r20	; 0x07
 14a:	28 87       	std	Y+8, r18	; 0x08
	stepper->direction = direction;
 14c:	8b 81       	ldd	r24, Y+3	; 0x03
 14e:	9c 81       	ldd	r25, Y+4	; 0x04
 150:	28 85       	ldd	r18, Y+8	; 0x08
 152:	fc 01       	movw	r30, r24
 154:	20 83       	st	Z, r18
	uint16_t steps = (lengthInDegress*100)/17;
 156:	8d 81       	ldd	r24, Y+5	; 0x05
 158:	9e 81       	ldd	r25, Y+6	; 0x06
 15a:	44 e6       	ldi	r20, 0x64	; 100
 15c:	48 9f       	mul	r20, r24
 15e:	90 01       	movw	r18, r0
 160:	49 9f       	mul	r20, r25
 162:	30 0d       	add	r19, r0
 164:	11 24       	eor	r1, r1
 166:	a1 ef       	ldi	r26, 0xF1	; 241
 168:	b0 ef       	ldi	r27, 0xF0	; 240
 16a:	0e 94 ac 01 	call	0x358	; 0x358 <__umulhisi3>
 16e:	92 95       	swap	r25
 170:	82 95       	swap	r24
 172:	8f 70       	andi	r24, 0x0F	; 15
 174:	89 27       	eor	r24, r25
 176:	9f 70       	andi	r25, 0x0F	; 15
 178:	89 27       	eor	r24, r25
 17a:	9a 83       	std	Y+2, r25	; 0x02
 17c:	89 83       	std	Y+1, r24	; 0x01
	steps = steps * 3; //3 is not correct
 17e:	29 81       	ldd	r18, Y+1	; 0x01
 180:	3a 81       	ldd	r19, Y+2	; 0x02
 182:	c9 01       	movw	r24, r18
 184:	88 0f       	add	r24, r24
 186:	99 1f       	adc	r25, r25
 188:	82 0f       	add	r24, r18
 18a:	93 1f       	adc	r25, r19
 18c:	9a 83       	std	Y+2, r25	; 0x02
 18e:	89 83       	std	Y+1, r24	; 0x01
	stepper->stepsToRun = steps;
 190:	8b 81       	ldd	r24, Y+3	; 0x03
 192:	9c 81       	ldd	r25, Y+4	; 0x04
 194:	29 81       	ldd	r18, Y+1	; 0x01
 196:	3a 81       	ldd	r19, Y+2	; 0x02
 198:	fc 01       	movw	r30, r24
 19a:	34 83       	std	Z+4, r19	; 0x04
 19c:	23 83       	std	Z+3, r18	; 0x03
	START_STEPPER_A;
 19e:	84 e6       	ldi	r24, 0x64	; 100
 1a0:	90 e0       	ldi	r25, 0x00	; 0
 1a2:	24 e6       	ldi	r18, 0x64	; 100
 1a4:	30 e0       	ldi	r19, 0x00	; 0
 1a6:	f9 01       	movw	r30, r18
 1a8:	20 81       	ld	r18, Z
 1aa:	2f 7d       	andi	r18, 0xDF	; 223
 1ac:	fc 01       	movw	r30, r24
 1ae:	20 83       	st	Z, r18
}
 1b0:	00 00       	nop
 1b2:	28 96       	adiw	r28, 0x08	; 8
 1b4:	0f b6       	in	r0, 0x3f	; 63
 1b6:	f8 94       	cli
 1b8:	de bf       	out	0x3e, r29	; 62
 1ba:	0f be       	out	0x3f, r0	; 63
 1bc:	cd bf       	out	0x3d, r28	; 61
 1be:	df 91       	pop	r29
 1c0:	cf 91       	pop	r28
 1c2:	08 95       	ret

000001c4 <__vector_14>:

ISR (TIMER0_COMPA_vect)
{
 1c4:	1f 92       	push	r1
 1c6:	0f 92       	push	r0
 1c8:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
 1cc:	0f 92       	push	r0
 1ce:	11 24       	eor	r1, r1
 1d0:	2f 93       	push	r18
 1d2:	3f 93       	push	r19
 1d4:	4f 93       	push	r20
 1d6:	5f 93       	push	r21
 1d8:	8f 93       	push	r24
 1da:	9f 93       	push	r25
 1dc:	ef 93       	push	r30
 1de:	ff 93       	push	r31
 1e0:	cf 93       	push	r28
 1e2:	df 93       	push	r29
 1e4:	cd b7       	in	r28, 0x3d	; 61
 1e6:	de b7       	in	r29, 0x3e	; 62
	switch (stepperA.direction){
 1e8:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <stepperA>
 1ec:	88 2f       	mov	r24, r24
 1ee:	90 e0       	ldi	r25, 0x00	; 0
 1f0:	00 97       	sbiw	r24, 0x00	; 0
 1f2:	91 f0       	breq	.+36     	; 0x218 <__vector_14+0x54>
 1f4:	01 97       	sbiw	r24, 0x01	; 1
 1f6:	01 f5       	brne	.+64     	; 0x238 <__vector_14+0x74>
	case CW:
		PORTB = (0b1000 >> stepperA.activeCoil);
 1f8:	85 e2       	ldi	r24, 0x25	; 37
 1fa:	90 e0       	ldi	r25, 0x00	; 0
 1fc:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <stepperA+0x6>
 200:	42 2f       	mov	r20, r18
 202:	50 e0       	ldi	r21, 0x00	; 0
 204:	28 e0       	ldi	r18, 0x08	; 8
 206:	30 e0       	ldi	r19, 0x00	; 0
 208:	02 c0       	rjmp	.+4      	; 0x20e <__vector_14+0x4a>
 20a:	35 95       	asr	r19
 20c:	27 95       	ror	r18
 20e:	4a 95       	dec	r20
 210:	e2 f7       	brpl	.-8      	; 0x20a <__vector_14+0x46>
 212:	fc 01       	movw	r30, r24
 214:	20 83       	st	Z, r18
		break;
 216:	10 c0       	rjmp	.+32     	; 0x238 <__vector_14+0x74>
	case CCW:
		PORTB = (0b0001 << stepperA.activeCoil);
 218:	85 e2       	ldi	r24, 0x25	; 37
 21a:	90 e0       	ldi	r25, 0x00	; 0
 21c:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <stepperA+0x6>
 220:	42 2f       	mov	r20, r18
 222:	50 e0       	ldi	r21, 0x00	; 0
 224:	21 e0       	ldi	r18, 0x01	; 1
 226:	30 e0       	ldi	r19, 0x00	; 0
 228:	02 c0       	rjmp	.+4      	; 0x22e <__vector_14+0x6a>
 22a:	22 0f       	add	r18, r18
 22c:	33 1f       	adc	r19, r19
 22e:	4a 95       	dec	r20
 230:	e2 f7       	brpl	.-8      	; 0x22a <__vector_14+0x66>
 232:	fc 01       	movw	r30, r24
 234:	20 83       	st	Z, r18
		break;
 236:	00 00       	nop
	}

	if (stepperA.activeCoil < 3){
 238:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <stepperA+0x6>
 23c:	83 30       	cpi	r24, 0x03	; 3
 23e:	30 f4       	brcc	.+12     	; 0x24c <__vector_14+0x88>
		stepperA.activeCoil++;
 240:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <stepperA+0x6>
 244:	8f 5f       	subi	r24, 0xFF	; 255
 246:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <stepperA+0x6>
 24a:	02 c0       	rjmp	.+4      	; 0x250 <__vector_14+0x8c>
	} else {
		stepperA.activeCoil = 0;
 24c:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <stepperA+0x6>
	}

	//Needs protection
	if (stepperA.stepsToRun>0){
 250:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <stepperA+0x3>
 254:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <stepperA+0x4>
 258:	89 2b       	or	r24, r25
 25a:	49 f0       	breq	.+18     	; 0x26e <__vector_14+0xaa>
		stepperA.stepsToRun--;
 25c:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <stepperA+0x3>
 260:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <stepperA+0x4>
 264:	01 97       	sbiw	r24, 0x01	; 1
 266:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <stepperA+0x4>
 26a:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <stepperA+0x3>
	}
}
 26e:	00 00       	nop
 270:	df 91       	pop	r29
 272:	cf 91       	pop	r28
 274:	ff 91       	pop	r31
 276:	ef 91       	pop	r30
 278:	9f 91       	pop	r25
 27a:	8f 91       	pop	r24
 27c:	5f 91       	pop	r21
 27e:	4f 91       	pop	r20
 280:	3f 91       	pop	r19
 282:	2f 91       	pop	r18
 284:	0f 90       	pop	r0
 286:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
 28a:	0f 90       	pop	r0
 28c:	1f 90       	pop	r1
 28e:	18 95       	reti

00000290 <calculateTimerFromStepInterval>:



static uint8_t calculateTimerFromStepInterval(uint8_t stepIntervalInMs){
 290:	cf 93       	push	r28
 292:	df 93       	push	r29
 294:	00 d0       	rcall	.+0      	; 0x296 <calculateTimerFromStepInterval+0x6>
 296:	00 d0       	rcall	.+0      	; 0x298 <calculateTimerFromStepInterval+0x8>
 298:	1f 92       	push	r1
 29a:	cd b7       	in	r28, 0x3d	; 61
 29c:	de b7       	in	r29, 0x3e	; 62
 29e:	8d 83       	std	Y+5, r24	; 0x05
	//Presumes prescalar set to 1024

	uint16_t stepIntervalInMicroSeconds = stepIntervalInMs * 1000;
 2a0:	8d 81       	ldd	r24, Y+5	; 0x05
 2a2:	48 2f       	mov	r20, r24
 2a4:	50 e0       	ldi	r21, 0x00	; 0
 2a6:	28 ee       	ldi	r18, 0xE8	; 232
 2a8:	33 e0       	ldi	r19, 0x03	; 3
 2aa:	42 9f       	mul	r20, r18
 2ac:	c0 01       	movw	r24, r0
 2ae:	43 9f       	mul	r20, r19
 2b0:	90 0d       	add	r25, r0
 2b2:	52 9f       	mul	r21, r18
 2b4:	90 0d       	add	r25, r0
 2b6:	11 24       	eor	r1, r1
 2b8:	9a 83       	std	Y+2, r25	; 0x02
 2ba:	89 83       	std	Y+1, r24	; 0x01

	uint8_t microSecondsPerTick = 64;
 2bc:	80 e4       	ldi	r24, 0x40	; 64
 2be:	8b 83       	std	Y+3, r24	; 0x03

	uint8_t timerStopCount = stepIntervalInMicroSeconds/microSecondsPerTick;
 2c0:	8b 81       	ldd	r24, Y+3	; 0x03
 2c2:	28 2f       	mov	r18, r24
 2c4:	30 e0       	ldi	r19, 0x00	; 0
 2c6:	89 81       	ldd	r24, Y+1	; 0x01
 2c8:	9a 81       	ldd	r25, Y+2	; 0x02
 2ca:	b9 01       	movw	r22, r18
 2cc:	0e 94 98 01 	call	0x330	; 0x330 <__udivmodhi4>
 2d0:	cb 01       	movw	r24, r22
 2d2:	8c 83       	std	Y+4, r24	; 0x04


	return timerStopCount;
 2d4:	8c 81       	ldd	r24, Y+4	; 0x04

}
 2d6:	0f 90       	pop	r0
 2d8:	0f 90       	pop	r0
 2da:	0f 90       	pop	r0
 2dc:	0f 90       	pop	r0
 2de:	0f 90       	pop	r0
 2e0:	df 91       	pop	r29
 2e2:	cf 91       	pop	r28
 2e4:	08 95       	ret

000002e6 <stateMachine>:
#include "stateMachine.h"

State currentState = INIT;

void stateMachine(struct stepper *stepper){
 2e6:	cf 93       	push	r28
 2e8:	df 93       	push	r29
 2ea:	00 d0       	rcall	.+0      	; 0x2ec <stateMachine+0x6>
 2ec:	cd b7       	in	r28, 0x3d	; 61
 2ee:	de b7       	in	r29, 0x3e	; 62
 2f0:	9a 83       	std	Y+2, r25	; 0x02
 2f2:	89 83       	std	Y+1, r24	; 0x01
	case INIT:

		break;
	case RUNNING:

		break;
 2f4:	00 00       	nop
	case IDLE:

		break;
	}

}
 2f6:	00 00       	nop
 2f8:	0f 90       	pop	r0
 2fa:	0f 90       	pop	r0
 2fc:	df 91       	pop	r29
 2fe:	cf 91       	pop	r28
 300:	08 95       	ret

00000302 <changeState>:

void changeState(State state){
 302:	cf 93       	push	r28
 304:	df 93       	push	r29
 306:	1f 92       	push	r1
 308:	cd b7       	in	r28, 0x3d	; 61
 30a:	de b7       	in	r29, 0x3e	; 62
 30c:	89 83       	std	Y+1, r24	; 0x01
	currentState = state;
 30e:	89 81       	ldd	r24, Y+1	; 0x01
 310:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <currentState>
}
 314:	00 00       	nop
 316:	0f 90       	pop	r0
 318:	df 91       	pop	r29
 31a:	cf 91       	pop	r28
 31c:	08 95       	ret

0000031e <getCurrentState>:

State getCurrentState(){
 31e:	cf 93       	push	r28
 320:	df 93       	push	r29
 322:	cd b7       	in	r28, 0x3d	; 61
 324:	de b7       	in	r29, 0x3e	; 62
	return currentState;
 326:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <currentState>
}
 32a:	df 91       	pop	r29
 32c:	cf 91       	pop	r28
 32e:	08 95       	ret

00000330 <__udivmodhi4>:
 330:	aa 1b       	sub	r26, r26
 332:	bb 1b       	sub	r27, r27
 334:	51 e1       	ldi	r21, 0x11	; 17
 336:	07 c0       	rjmp	.+14     	; 0x346 <__udivmodhi4_ep>

00000338 <__udivmodhi4_loop>:
 338:	aa 1f       	adc	r26, r26
 33a:	bb 1f       	adc	r27, r27
 33c:	a6 17       	cp	r26, r22
 33e:	b7 07       	cpc	r27, r23
 340:	10 f0       	brcs	.+4      	; 0x346 <__udivmodhi4_ep>
 342:	a6 1b       	sub	r26, r22
 344:	b7 0b       	sbc	r27, r23

00000346 <__udivmodhi4_ep>:
 346:	88 1f       	adc	r24, r24
 348:	99 1f       	adc	r25, r25
 34a:	5a 95       	dec	r21
 34c:	a9 f7       	brne	.-22     	; 0x338 <__udivmodhi4_loop>
 34e:	80 95       	com	r24
 350:	90 95       	com	r25
 352:	bc 01       	movw	r22, r24
 354:	cd 01       	movw	r24, r26
 356:	08 95       	ret

00000358 <__umulhisi3>:
 358:	a2 9f       	mul	r26, r18
 35a:	b0 01       	movw	r22, r0
 35c:	b3 9f       	mul	r27, r19
 35e:	c0 01       	movw	r24, r0
 360:	a3 9f       	mul	r26, r19
 362:	70 0d       	add	r23, r0
 364:	81 1d       	adc	r24, r1
 366:	11 24       	eor	r1, r1
 368:	91 1d       	adc	r25, r1
 36a:	b2 9f       	mul	r27, r18
 36c:	70 0d       	add	r23, r0
 36e:	81 1d       	adc	r24, r1
 370:	11 24       	eor	r1, r1
 372:	91 1d       	adc	r25, r1
 374:	08 95       	ret

00000376 <_exit>:
 376:	f8 94       	cli

00000378 <__stop_program>:
 378:	ff cf       	rjmp	.-2      	; 0x378 <__stop_program>
